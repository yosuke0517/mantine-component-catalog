import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from 'react'
import { supabase } from '../utils/supabase'
import useStore from '../store'
import Link from 'next/link'
import { Center } from '@mantine/core'
import { NextPage } from 'next'
import { DashBord } from '../components/DashBord'
import { SignupEmailForm } from '../components/SignupEmailForm'
import { UseFormReturnType } from '@mantine/form/lib/use-form'
import { IForm } from '../types'
import { ApiError } from '@supabase/gotrue-js'
import Card from '../components/Card'

const Home: NextPage = () => {
  const session = useStore((state) => state.session)
  const setSession = useStore((state) => state.setSession)
  const signupCallback = async (form: UseFormReturnType<IForm>) => {
    const { error } = await supabase.auth.signUp({
      email: form.values.email,
      password: form.values.password,
    })
    return error
  }
  const signinCallback = async (form: UseFormReturnType<IForm>) => {
    const { error } = await supabase.auth.signIn({
      email: form.values.email,
      password: form.values.password,
    })
    return error
  }
  useEffect(() => {
    setSession(supabase.auth.session())
    // ユーザがログイン、ログアウトなどのアクションを行うたびにonAuthStateChange内の処理を実施する
    supabase.auth.onAuthStateChange((_event, session) => {
      // 新しいセッション情報を受け取り更新する
      setSession(session)
    })
  }, [setSession])

  const [cards, setCards] = useState<{ id: string; text: string }[]>([
    { id: '1', text: 'Card 1' },
    { id: '2', text: 'Card 2' },
    { id: '3', text: 'Card 3' },
  ])

  const handleDrop = (draggedId: string, droppedId: string) => {
    const draggedIndex = cards.findIndex((c) => c.id === draggedId)
    const droppedIndex = cards.findIndex((c) => c.id === droppedId)
    const newCards = [...cards]
    newCards[draggedIndex] = cards[droppedIndex]
    newCards[droppedIndex] = cards[draggedIndex]
    setCards(newCards)
  }
  return (
    <div className="w-full">
      <Head>
        <title>mantineカタログ集</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!session ? (
        <SignupEmailForm
          signupCallback={signupCallback}
          signinCallback={signinCallback}
        />
      ) : (
        ''
      )}
      <Center>
        <Link className="text-blue-500" href="/button">
          button
        </Link>
      </Center>
      <Center>
        <Link className="text-blue-500" href="/grid">
          grid
        </Link>
        {cards.map((card) => (
          <Card
            key={card.id}
            id={card.id}
            text={card.text}
            onDrop={handleDrop}
          />
        ))}
      </Center>
    </div>
  )
}
export default Home
